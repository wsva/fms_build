{
  "version": 3,
  "pages404": true,
  "caseSensitive": false,
  "basePath": "",
  "redirects": [
    {
      "source": "/:path+/",
      "destination": "/:path+",
      "internal": true,
      "statusCode": 308,
      "regex": "^(?:/((?:[^/]+?)(?:/(?:[^/]+?))*))/$"
    }
  ],
  "headers": [],
  "rewrites": {
    "beforeFiles": [],
    "afterFiles": [],
    "fallback": []
  },
  "dynamicRoutes": [
    {
      "page": "/api/auth/[...nextauth]",
      "regex": "^/api/auth/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtPnextauth": "nxtPnextauth"
      },
      "namedRegex": "^/api/auth/(?<nxtPnextauth>.+?)(?:/)?$"
    },
    {
      "page": "/api/data/[...filename]",
      "regex": "^/api/data/(.+?)(?:/)?$",
      "routeKeys": {
        "nxtPfilename": "nxtPfilename"
      },
      "namedRegex": "^/api/data/(?<nxtPfilename>.+?)(?:/)?$"
    },
    {
      "page": "/blog/[uuid]",
      "regex": "^/blog/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPuuid": "nxtPuuid"
      },
      "namedRegex": "^/blog/(?<nxtPuuid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/card/tag/[uuid]",
      "regex": "^/card/tag/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPuuid": "nxtPuuid"
      },
      "namedRegex": "^/card/tag/(?<nxtPuuid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/card/[uuid]",
      "regex": "^/card/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPuuid": "nxtPuuid"
      },
      "namedRegex": "^/card/(?<nxtPuuid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/speak/ask/[uuid]",
      "regex": "^/speak/ask/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPuuid": "nxtPuuid"
      },
      "namedRegex": "^/speak/ask/(?<nxtPuuid>[^/]+?)(?:/)?$"
    },
    {
      "page": "/speak/read/book/[uuid]",
      "regex": "^/speak/read/book/([^/]+?)(?:/)?$",
      "routeKeys": {
        "nxtPuuid": "nxtPuuid"
      },
      "namedRegex": "^/speak/read/book/(?<nxtPuuid>[^/]+?)(?:/)?$"
    }
  ],
  "staticRoutes": [
    {
      "page": "/",
      "regex": "^/(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/(?:/)?$"
    },
    {
      "page": "/_not-found",
      "regex": "^/_not\\-found(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/_not\\-found(?:/)?$"
    },
    {
      "page": "/blog",
      "regex": "^/blog(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog(?:/)?$"
    },
    {
      "page": "/blog/all_of_another",
      "regex": "^/blog/all_of_another(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog/all_of_another(?:/)?$"
    },
    {
      "page": "/blog/all_of_others",
      "regex": "^/blog/all_of_others(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/blog/all_of_others(?:/)?$"
    },
    {
      "page": "/card/market",
      "regex": "^/card/market(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/card/market(?:/)?$"
    },
    {
      "page": "/card/my",
      "regex": "^/card/my(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/card/my(?:/)?$"
    },
    {
      "page": "/card/tag",
      "regex": "^/card/tag(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/card/tag(?:/)?$"
    },
    {
      "page": "/card/test",
      "regex": "^/card/test(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/card/test(?:/)?$"
    },
    {
      "page": "/favicon.ico",
      "regex": "^/favicon\\.ico(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/favicon\\.ico(?:/)?$"
    },
    {
      "page": "/listen/dictation",
      "regex": "^/listen/dictation(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/listen/dictation(?:/)?$"
    },
    {
      "page": "/speak/ask",
      "regex": "^/speak/ask(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/speak/ask(?:/)?$"
    },
    {
      "page": "/speak/read",
      "regex": "^/speak/read(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/speak/read(?:/)?$"
    },
    {
      "page": "/speak/read/book",
      "regex": "^/speak/read/book(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/speak/read/book(?:/)?$"
    },
    {
      "page": "/speak/torsten_voice",
      "regex": "^/speak/torsten_voice(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/speak/torsten_voice(?:/)?$"
    },
    {
      "page": "/unauthorized",
      "regex": "^/unauthorized(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/unauthorized(?:/)?$"
    },
    {
      "page": "/voice_access",
      "regex": "^/voice_access(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/voice_access(?:/)?$"
    },
    {
      "page": "/voice_access/map",
      "regex": "^/voice_access/map(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/voice_access/map(?:/)?$"
    },
    {
      "page": "/word/sentence",
      "regex": "^/word/sentence(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/word/sentence(?:/)?$"
    },
    {
      "page": "/word/top",
      "regex": "^/word/top(?:/)?$",
      "routeKeys": {},
      "namedRegex": "^/word/top(?:/)?$"
    }
  ],
  "dataRoutes": [],
  "rsc": {
    "header": "rsc",
    "varyHeader": "rsc, next-router-state-tree, next-router-prefetch, next-router-segment-prefetch",
    "prefetchHeader": "next-router-prefetch",
    "didPostponeHeader": "x-nextjs-postponed",
    "contentTypeHeader": "text/x-component",
    "suffix": ".rsc",
    "prefetchSuffix": ".prefetch.rsc",
    "prefetchSegmentHeader": "next-router-segment-prefetch",
    "prefetchSegmentSuffix": ".segment.rsc",
    "prefetchSegmentDirSuffix": ".segments"
  },
  "rewriteHeaders": {
    "pathHeader": "x-nextjs-rewritten-path",
    "queryHeader": "x-nextjs-rewritten-query"
  }
}